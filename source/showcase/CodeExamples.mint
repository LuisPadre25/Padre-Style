/* Code Examples as a Module */
module CodeExamples {
  const MINT_EXAMPLE =
    "component Counter {\n  property initial : Number = 0\n  state count : Number = initial\n\n  fun increment : Promise(Void) {\n    next { count: count + 1 }\n  }\n\n  fun render : Html {\n    <div>\n      <button onClick={increment}>\n        \"Count: \\#{Number.toString(count)}\"\n      </button>\n    </div>\n  }\n}"

  const JAVASCRIPT_EXAMPLE =
    "const fetchUser = async (id) => {\n  try {\n    const response = await fetch('/api/users/' + id);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    throw error;\n  }\n};\n\n// Usage\nconst user = await fetchUser(123);"

  const TYPESCRIPT_EXAMPLE =
    "interface User {\n  id: number;\n  name: string;\n  email: string;\n  role: 'admin' | 'user';\n}\n\nclass UserService {\n  private users: User[] = [];\n\n  async getUser(id: number): Promise<User | null> {\n    return this.users.find(u => u.id === id) ?? null;\n  }\n\n  addUser(user: User): void {\n    this.users.push(user);\n  }\n}"

  const PYTHON_EXAMPLE =
    "def fibonacci(n: int) -> list[int]:\n  \"\"\"Generate Fibonacci sequence up to n terms.\"\"\"\n  if n <= 0:\n    return []\n  elif n == 1:\n    return [0]\n\n  sequence = [0, 1]\n  for i in range(2, n):\n    sequence.append(sequence[i-1] + sequence[i-2])\n\n  return sequence\n\n# Usage\nresult = fibonacci(10)\nprint('Fibonacci:', result)"

  const GO_EXAMPLE =
    "package main\n\nimport \"fmt\"\n\ntype Person struct {\n  Name string\n  Age  int\n}\n\nfunc (p *Person) Greet() string {\n  return fmt.Sprintf(\"Hello, I'm %s and I'm %d years old\", p.Name, p.Age)\n}\n\nfunc main() {\n  person := Person{Name: \"John\", Age: 30}\n  fmt.Println(person.Greet())\n}"

  const CRYSTAL_EXAMPLE =
    "# Web Framework with Middleware\nmodule WebFramework\n  class Application\n    getter middleware : Array(Proc)\n    getter routes : Hash(String, Proc)\n\n    def initialize\n      @middleware = [] of Proc(HTTP::Server::Context, Nil)\n      @routes = {} of String => Proc(Array(String), String)\n    end\n\n    def use(&block : HTTP::Server::Context -> Nil)\n      @middleware << block\n    end\n\n    def get(path : String, &block : -> String)\n      @routes[path] = ->(params : Array(String)) {\n        block.call\n      }\n    end\n\n    def post(path : String, &block)\n      @routes[path] = ->(params : Array(String)) {\n        body = JSON.parse(params[0])\n        block.call(body.as_h)\n      }\n    end\n  end\nend\n\n# Usage\napp = WebFramework::Application.new\napp.get(\"/users\") { User.all.to_json }\napp.post(\"/users\") { |data|\n  User.create!(name: data[\"name\"].as_s)\n}"

  const BASH_EXAMPLE =
    "#!/bin/bash\nset -euo pipefail\n\n# Deployment Script\nreadonly DEPLOY_USER=\"deploy\"\nreadonly APP_NAME=\"myapp\"\nreadonly DEPLOY_PATH=\"/var/www/${APP_NAME}\"\n\nlog_info() {\n  echo \"[INFO] $(date '+%Y-%m-%d %H:%M:%S') - $*\"\n}\n\nbackup_current() {\n  log_info \"Creating backup...\"\n  local timestamp=$(date '+%Y%m%d_%H%M%S')\n  local backup_file=\"${BACKUP_PATH}/${APP_NAME}_${timestamp}.tar.gz\"\n\n  if [[ -d \"${DEPLOY_PATH}\" ]]; then\n    tar -czf \"${backup_file}\" -C \"$(dirname ${DEPLOY_PATH})\" \"$(basename ${DEPLOY_PATH})\"\n    log_info \"Backup created: ${backup_file}\"\n  fi\n}\n\ndeploy() {\n  local version=$1\n  log_info \"Deploying version ${version}...\"\n\n  if systemctl is-active --quiet \"${APP_NAME}\"; then\n    systemctl stop \"${APP_NAME}\"\n  fi\n\n  systemctl start \"${APP_NAME}\"\n}\n\nmain \"$@\""

  const HTML_CSS_EXAMPLE =
    "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <style>\n    :root {\n      --primary-color: hsl(220, 90%, 56%);\n      --spacing-unit: 0.5rem;\n    }\n\n    .dashboard {\n      display: grid;\n      grid-template-columns: minmax(200px, 250px) 1fr;\n      grid-template-areas:\n        \"sidebar header\"\n        \"sidebar main\";\n      min-height: 100vh;\n    }\n\n    @media (max-width: 768px) {\n      .dashboard {\n        grid-template-columns: 1fr;\n      }\n    }\n\n    .card {\n      background-color: var(--bg-primary);\n      border-radius: 0.75rem;\n      padding: calc(var(--spacing-unit) * 3);\n    }\n  </style>\n</head>\n<body>\n  <div class=\"dashboard\">\n    <header class=\"header\">\n      <h1>Dashboard</h1>\n    </header>\n  </div>\n</body>\n</html>"

  const JSON_DEEP_EXAMPLE =
    "{\n  \"api\": {\n    \"version\": \"v1\",\n    \"endpoints\": {\n      \"users\": {\n        \"get\": {\n          \"path\": \"/users/:id\",\n          \"params\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"required\": true,\n              \"validation\": {\n                \"pattern\": \"^[0-9]+$\",\n                \"min\": 1,\n                \"max\": 999999,\n                \"errors\": {\n                  \"pattern\": \"Must be numeric\",\n                  \"range\": \"ID out of range\"\n                }\n              }\n            }\n          },\n          \"response\": {\n            \"success\": {\n              \"code\": 200,\n              \"body\": {\n                \"user\": {\n                  \"id\": \"number\",\n                  \"profile\": {\n                    \"name\": \"string\",\n                    \"settings\": {\n                      \"theme\": \"dark\",\n                      \"notifications\": {\n                        \"email\": true,\n                        \"push\": false\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}"

  const SQL_EXAMPLE =
    "-- Complex Analytics Query\nWITH user_activity AS (\n  SELECT\n    u.id AS user_id,\n    COUNT(DISTINCT o.id) AS total_orders,\n    SUM(o.total_amount) AS lifetime_value,\n    MAX(o.created_at) AS last_order_date\n  FROM users u\n  LEFT JOIN orders o ON u.id = o.user_id\n  WHERE u.status = 'active'\n  GROUP BY u.id\n),\n\nuser_segments AS (\n  SELECT\n    user_id,\n    total_orders,\n    lifetime_value,\n    CASE\n      WHEN lifetime_value >= 10000 THEN 'VIP'\n      WHEN lifetime_value >= 5000 THEN 'Premium'\n      ELSE 'Standard'\n    END AS customer_tier,\n    ROW_NUMBER() OVER (\n      PARTITION BY CASE\n        WHEN lifetime_value >= 10000 THEN 'VIP'\n        ELSE 'Other'\n      END\n      ORDER BY lifetime_value DESC\n    ) AS tier_rank\n  FROM user_activity\n)\n\nSELECT * FROM user_segments\nWHERE tier_rank <= 100\nORDER BY lifetime_value DESC;"

  const NESTED_BRACKETS_EXAMPLE =
    "// Extreme Bracket Nesting Test\nconst config = {\n  level0: {\n    level1: {\n      level2: {\n        level3: {\n          level4: {\n            level5: {\n              level6: {\n                level7: {\n                  level8: {\n                    level9: {\n                      level10: {\n                        level11: {\n                          level12: {\n                            level13: {\n                              level14: {\n                                level15: [1, 2, [3, 4, [5, [6, [7]]]]]\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\n// Concatenated brackets\nconst arr = [[[]]];\nconst fn = ((((x) => x))));\nconst obj = {{{{a: 1}}}};"
}
